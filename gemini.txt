import java.awt.*;
import java.util.Random;
import java.util.Vector;

// Classe principal do robô
public class robot extends AdvancedRobot {

    // Variáveis para controlar o comportamento do robô
    private Random random = new Random();
    private double heading = 0; // Ângulo de direção atual
    private double distanceToWall = Double.MAX_VALUE; // Distância até a parede
    private Vector<Enemy> enemies = new Vector<>(); // Lista de inimigos detectados
    private Enemy targetEnemy = null; // Inimigo atualmente visado
    private int strategy = 0; // Estratégia de ataque atual (0: constante, 1: oportuno, 2: defensivo)

    // Método chamado quando o robô é inicializado
    public void run() {
        // Ajusta a cor do robô
        setBodyColor(Color.BLUE);
        setGunColor(Color.RED);
        setRadarColor(Color.GREEN);

        // Loop principal do robô
        while (true) {
            // Atualiza a distância até a parede
            distanceToWall = getBattleFieldWidth() - getX();

            // Comportamento de movimento
            if (random.nextBoolean()) {
                // Vira para a esquerda
                turnLeft(45);
            } else {
                // Vira para a direita
                turnRight(45);
            }

            // Avança
            ahead(distanceToWall * 0.7); // Ajusta a distância para evitar colisões

            // Comportamento de radar
            turnRadarRight(360); // Gira o radar para buscar inimigos

            // Detecção de inimigos
            scan(); // Chama o método scan() para detectar inimigos

            // Rastreamento de inimigos
            updateEnemies(); // Atualiza a lista de inimigos detectados

            // Seleção de alvo
            selectTargetEnemy(); // Seleciona o inimigo a ser atacado

            // Comportamento de arma
            if (getEnergy() > 0.5 && getGunHeat() == 0) {
                if (targetEnemy != null) {
                    // Se um inimigo foi selecionado e o canhão estiver frio, atira
                    fire(calculateShotPower(targetEnemy)); // Ajusta a potência do tiro
                }
            }

            // Executa as ações do robô
            execute();
        }
    }

    // Método para detectar inimigos
    public void scan() {
        int numEnemies = getNumberOfScannedObjects();
        for (int i = 0; i < numEnemies; i++) {
            ScanObject object = getScannedObject(i);
            if (object instanceof Robot) {
                // Se o objeto detectado for um robô, cria um novo objeto Enemy
                Enemy enemy = new Enemy(object.getDistance(), object.getAngle(), object.getHeading(), object.getX(), object.getY());
                enemies.add(enemy);
            }
        }
    }

    // Método para atualizar a lista de inimigos
    private void updateEnemies() {
        // Remove inimigos que não foram mais detectados
        for (int i = enemies.size() - 1; i >= 0; i--) {
            Enemy enemy = enemies.get(i);
            if (!enemy.isVisible()) {
                enemies.remove(i);
            }
        }

        // Atualiza a posição e o ângulo dos inimigos restantes
        for (Enemy enemy : enemies) {
            enemy.updatePositionAndHeading();
        }
    }

    // Método para selecionar o inimigo a ser atacado
    private void selectTargetEnemy() {
        if (enemies.isEmpty()) {
            // Se não há inimigos, nenhum é selecionado
            targetEnemy = null;
        } else {
            // Se há pelo menos um inimigo, seleciona o mais próximo
            targetEnemy = enemies.get(0);
            for (Enemy enemy : enemies) {
                if (enemy.getDistance() < targetEnemy.getDistance()) {
                    targetEnemy = enemy;
                }
            }
        }
    }

    // Método para calcular a potência do tiro
